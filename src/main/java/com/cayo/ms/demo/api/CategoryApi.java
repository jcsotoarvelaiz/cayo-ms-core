/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cayo.ms.demo.api;

import com.cayo.ms.demo.model.Category;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-25T13:32:01.526325541-04:00[America/New_York]")
@Validated
@Tag(name = "category", description = "the category API")
public interface CategoryApi {

    default CategoryApiDelegate getDelegate() {
        return new CategoryApiDelegate() {};
    }

    /**
     * POST /category : Add a new category
     * Add a new category
     *
     * @param category Create a new Category (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addCategory",
        summary = "Add a new category",
        description = "Add a new category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "demo_auth", scopes={ "write:categories", "read:categories" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Category> addCategory(
        @Parameter(name = "Category", description = "Create a new Category", required = true) @Valid @RequestBody Category category
    ) {
        return getDelegate().addCategory(category);
    }


    /**
     * DELETE /category/{categoryId} : Deletes a category
     * delete a category
     *
     * @param categoryId Category id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid category value (status code 400)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Deletes a category",
        description = "delete a category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid category value")
        },
        security = {
            @SecurityRequirement(name = "demo_auth", scopes={ "write:categories", "read:categories" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/category/{categoryId}"
    )
    default ResponseEntity<Void> deleteCategory(
        @Parameter(name = "categoryId", description = "Category id to delete", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") Long categoryId,
        @Parameter(name = "api_key", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return getDelegate().deleteCategory(categoryId, apiKey);
    }


    /**
     * GET /category/findByName : Finds Categories by name
     * Multiple status values can be provided with comma separated strings
     *
     * @param name Status values that need to be considered for filter (optional)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findCategoriesByName",
        summary = "Finds Categories by name",
        description = "Multiple status values can be provided with comma separated strings",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Category.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        },
        security = {
            @SecurityRequirement(name = "demo_auth", scopes={ "write:categories", "read:categories" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category/findByName",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Category>> findCategoriesByName(
        @Parameter(name = "name", description = "Status values that need to be considered for filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name
    ) {
        return getDelegate().findCategoriesByName(name);
    }


    /**
     * GET /category/{categoryId} : Find category by Id
     * Returns a single category
     *
     * @param categoryId ID of category to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Find category by Id",
        description = "Returns a single category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Category not found")
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "demo_auth", scopes={ "write:categories", "read:categories" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category/{categoryId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Category> getCategoryById(
        @Parameter(name = "categoryId", description = "ID of category to return", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") Long categoryId
    ) {
        return getDelegate().getCategoryById(categoryId);
    }


    /**
     * PUT /category : Update an existing category
     * Update an existing category by Id
     *
     * @param category Update an existent category (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Category not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update an existing category",
        description = "Update an existing category by Id",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Category not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "demo_auth", scopes={ "write:categories", "read:categories" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Category> updateCategory(
        @Parameter(name = "Category", description = "Update an existent category", required = true) @Valid @RequestBody Category category
    ) {
        return getDelegate().updateCategory(category);
    }


    /**
     * POST /category/{categoryId} : Updates a category with form data
     * 
     *
     * @param categoryId ID of category that needs to be updated (required)
     * @param name Name of category that needs to be updated (optional)
     * @param description Description of category that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateCategoryWithForm",
        summary = "Updates a category with form data",
        description = "",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "demo_auth", scopes={ "write:categories", "read:categories" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/category/{categoryId}"
    )
    default ResponseEntity<Void> updateCategoryWithForm(
        @Parameter(name = "categoryId", description = "ID of category that needs to be updated", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") Long categoryId,
        @Parameter(name = "name", description = "Name of category that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "description", description = "Description of category that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = false) String description
    ) {
        return getDelegate().updateCategoryWithForm(categoryId, name, description);
    }

}
